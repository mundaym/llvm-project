; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: llc -mtriple=riscv32 -verify-machineinstrs < %s \
; RUN:   | FileCheck %s -check-prefix=RV32I
; RUN: llc -mtriple=riscv32 -mattr=+unaligned-access -verify-machineinstrs < %s \
; RUN:   | FileCheck %s -check-prefix=RV32I_UNALIGN
; RUN: llc -mtriple=riscv32 -mattr=-unaligned-access -verify-machineinstrs < %s \
; RUN:   | FileCheck %s -check-prefix=RV32I_NOUNALIGN

define signext i16 @load16_align1(i16 *%ptr) nounwind {
; RV32I-LABEL: load16_align1:
; RV32I:       # %bb.0:
; RV32I-NEXT:    lb a1, 1(a0)
; RV32I-NEXT:    lbu a0, 0(a0)
; RV32I-NEXT:    slli a1, a1, 8
; RV32I-NEXT:    or a0, a1, a0
; RV32I-NEXT:    ret
;
; RV32I_UNALIGN-LABEL: load16_align1:
; RV32I_UNALIGN:       # %bb.0:
; RV32I_UNALIGN-NEXT:    lh a0, 0(a0)
; RV32I_UNALIGN-NEXT:    ret
;
; RV32I_NOUNALIGN-LABEL: load16_align1:
; RV32I_NOUNALIGN:       # %bb.0:
; RV32I_NOUNALIGN-NEXT:    lb a1, 1(a0)
; RV32I_NOUNALIGN-NEXT:    lbu a0, 0(a0)
; RV32I_NOUNALIGN-NEXT:    slli a1, a1, 8
; RV32I_NOUNALIGN-NEXT:    or a0, a1, a0
; RV32I_NOUNALIGN-NEXT:    ret
  %1 = load i16, i16* %ptr, align 1
  ret i16 %1
}

define i32 @load32_align1(i32 *%ptr) nounwind {
; RV32I-LABEL: load32_align1:
; RV32I:       # %bb.0:
; RV32I-NEXT:    lbu a1, 1(a0)
; RV32I-NEXT:    lbu a2, 0(a0)
; RV32I-NEXT:    lbu a3, 3(a0)
; RV32I-NEXT:    lbu a0, 2(a0)
; RV32I-NEXT:    slli a1, a1, 8
; RV32I-NEXT:    or a1, a1, a2
; RV32I-NEXT:    slli a2, a3, 8
; RV32I-NEXT:    or a0, a2, a0
; RV32I-NEXT:    slli a0, a0, 16
; RV32I-NEXT:    or a0, a0, a1
; RV32I-NEXT:    ret
;
; RV32I_UNALIGN-LABEL: load32_align1:
; RV32I_UNALIGN:       # %bb.0:
; RV32I_UNALIGN-NEXT:    lw a0, 0(a0)
; RV32I_UNALIGN-NEXT:    ret
;
; RV32I_NOUNALIGN-LABEL: load32_align1:
; RV32I_NOUNALIGN:       # %bb.0:
; RV32I_NOUNALIGN-NEXT:    lbu a1, 1(a0)
; RV32I_NOUNALIGN-NEXT:    lbu a2, 0(a0)
; RV32I_NOUNALIGN-NEXT:    lbu a3, 3(a0)
; RV32I_NOUNALIGN-NEXT:    lbu a0, 2(a0)
; RV32I_NOUNALIGN-NEXT:    slli a1, a1, 8
; RV32I_NOUNALIGN-NEXT:    or a1, a1, a2
; RV32I_NOUNALIGN-NEXT:    slli a2, a3, 8
; RV32I_NOUNALIGN-NEXT:    or a0, a2, a0
; RV32I_NOUNALIGN-NEXT:    slli a0, a0, 16
; RV32I_NOUNALIGN-NEXT:    or a0, a0, a1
; RV32I_NOUNALIGN-NEXT:    ret
  %1 = load i32, i32* %ptr, align 1
  ret i32 %1
}

define i32 @load32_align2(i32 *%ptr) nounwind {
; RV32I-LABEL: load32_align2:
; RV32I:       # %bb.0:
; RV32I-NEXT:    lhu a1, 2(a0)
; RV32I-NEXT:    lhu a0, 0(a0)
; RV32I-NEXT:    slli a1, a1, 16
; RV32I-NEXT:    or a0, a1, a0
; RV32I-NEXT:    ret
;
; RV32I_UNALIGN-LABEL: load32_align2:
; RV32I_UNALIGN:       # %bb.0:
; RV32I_UNALIGN-NEXT:    lw a0, 0(a0)
; RV32I_UNALIGN-NEXT:    ret
;
; RV32I_NOUNALIGN-LABEL: load32_align2:
; RV32I_NOUNALIGN:       # %bb.0:
; RV32I_NOUNALIGN-NEXT:    lhu a1, 2(a0)
; RV32I_NOUNALIGN-NEXT:    lhu a0, 0(a0)
; RV32I_NOUNALIGN-NEXT:    slli a1, a1, 16
; RV32I_NOUNALIGN-NEXT:    or a0, a1, a0
; RV32I_NOUNALIGN-NEXT:    ret
  %1 = load i32, i32* %ptr, align 2
  ret i32 %1
}

define void @store16_align1(i16 *%ptr, i16 signext %val) nounwind {
; RV32I-LABEL: store16_align1:
; RV32I:       # %bb.0:
; RV32I-NEXT:    sb a1, 0(a0)
; RV32I-NEXT:    srli a1, a1, 8
; RV32I-NEXT:    sb a1, 1(a0)
; RV32I-NEXT:    ret
;
; RV32I_UNALIGN-LABEL: store16_align1:
; RV32I_UNALIGN:       # %bb.0:
; RV32I_UNALIGN-NEXT:    sh a1, 0(a0)
; RV32I_UNALIGN-NEXT:    ret
;
; RV32I_NOUNALIGN-LABEL: store16_align1:
; RV32I_NOUNALIGN:       # %bb.0:
; RV32I_NOUNALIGN-NEXT:    sb a1, 0(a0)
; RV32I_NOUNALIGN-NEXT:    srli a1, a1, 8
; RV32I_NOUNALIGN-NEXT:    sb a1, 1(a0)
; RV32I_NOUNALIGN-NEXT:    ret
  store i16 %val, i16* %ptr, align 1
  ret void
}

define void @store32_align1(i32 *%ptr, i32 signext %val) nounwind {
; RV32I-LABEL: store32_align1:
; RV32I:       # %bb.0:
; RV32I-NEXT:    sb a1, 0(a0)
; RV32I-NEXT:    srli a2, a1, 24
; RV32I-NEXT:    sb a2, 3(a0)
; RV32I-NEXT:    srli a2, a1, 16
; RV32I-NEXT:    sb a2, 2(a0)
; RV32I-NEXT:    srli a1, a1, 8
; RV32I-NEXT:    sb a1, 1(a0)
; RV32I-NEXT:    ret
;
; RV32I_UNALIGN-LABEL: store32_align1:
; RV32I_UNALIGN:       # %bb.0:
; RV32I_UNALIGN-NEXT:    sw a1, 0(a0)
; RV32I_UNALIGN-NEXT:    ret
;
; RV32I_NOUNALIGN-LABEL: store32_align1:
; RV32I_NOUNALIGN:       # %bb.0:
; RV32I_NOUNALIGN-NEXT:    sb a1, 0(a0)
; RV32I_NOUNALIGN-NEXT:    srli a2, a1, 24
; RV32I_NOUNALIGN-NEXT:    sb a2, 3(a0)
; RV32I_NOUNALIGN-NEXT:    srli a2, a1, 16
; RV32I_NOUNALIGN-NEXT:    sb a2, 2(a0)
; RV32I_NOUNALIGN-NEXT:    srli a1, a1, 8
; RV32I_NOUNALIGN-NEXT:    sb a1, 1(a0)
; RV32I_NOUNALIGN-NEXT:    ret
  store i32 %val, i32* %ptr, align 1
  ret void
}

define void @store32_align2(i32 *%ptr, i32 signext %val) nounwind {
; RV32I-LABEL: store32_align2:
; RV32I:       # %bb.0:
; RV32I-NEXT:    sh a1, 0(a0)
; RV32I-NEXT:    srli a1, a1, 16
; RV32I-NEXT:    sh a1, 2(a0)
; RV32I-NEXT:    ret
;
; RV32I_UNALIGN-LABEL: store32_align2:
; RV32I_UNALIGN:       # %bb.0:
; RV32I_UNALIGN-NEXT:    sw a1, 0(a0)
; RV32I_UNALIGN-NEXT:    ret
;
; RV32I_NOUNALIGN-LABEL: store32_align2:
; RV32I_NOUNALIGN:       # %bb.0:
; RV32I_NOUNALIGN-NEXT:    sh a1, 0(a0)
; RV32I_NOUNALIGN-NEXT:    srli a1, a1, 16
; RV32I_NOUNALIGN-NEXT:    sh a1, 2(a0)
; RV32I_NOUNALIGN-NEXT:    ret
  store i32 %val, i32* %ptr, align 2
  ret void
}
